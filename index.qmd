---
format:
  dashboard:
    orientation: columns
    scrolling: true
aliases: 
  - home.html
project:
  output-dir: docs/
---

```{r}
#| echo: false
#| warning: false

library(Streptoprocne)
library(dplyr)
library(lubridate)
library(ggplot2)
library(hms) #Bug
```

```{r}
#| echo: false
#| warning: false


url <- "https://aa.usno.navy.mil/calculated/rstt/year?ID=AA&year=2024&task=0&lat=39.2805&lon=-76.5940&label=Baltimore%2C+MD&tz=5.00&tz_sign=-1&submit=Get+Data"
SunriseTable <- Streptoprocne::SunriseSunset(x=url)

url <- "https://aa.usno.navy.mil/calculated/rstt/year?ID=AA&year=2024&task=2&lat=39.2805&lon=-76.5940&label=Baltimore%2C+MD&tz=5.00&tz_sign=-1&submit=Get+Data"
TwilightTable <- CivilTwilight(x=url)
```

```{r}
#| echo: false
#| warning: false


year <- as.integer(format(Sys.Date(), "%Y"))

TheData <- left_join(SunriseTable, TwilightTable, by=c("Month", "Day"))

TheData$Date <- lubridate::make_date(year = year,
 month = match(TheData$Month, month.name), day = as.integer(TheData$Day))

Data <- TheData |> arrange(Date)|> relocate(Date, .before = Sunrise) |>
   select(-Month, -Day)

tz <- "America/New_York"
dates <- seq(as.POSIXct(paste0(year, "-01-01"), tz = tz),
  as.POSIXct(paste0(year, "-12-31"), tz = tz),by = "day")
dst_changes <- which(diff(lubridate::dst(dates)) != 0)
dst_start <- dates[dst_changes[1] + 1] 
dst_end <- dates[dst_changes[2] + 1]

DST_Data <- Data |> mutate(
      Sunrise = case_when(
      Date >= dst_start & Date < dst_end ~ Sunrise + hours(1),
      TRUE ~ Sunrise),
    Sunset = case_when(
      Date >= dst_start & Date < dst_end ~ Sunset + hours(1),
      TRUE ~ Sunset),
    Dawn = case_when(
      Date >= dst_start & Date < dst_end ~ Dawn + hours(1),
      TRUE ~ Dawn),
    Dusk = case_when(
      Date >= dst_start & Date < dst_end ~ Dusk + hours(1),
      TRUE ~ Dusk))

current_time <- Sys.time()
current_time <- as.Date(current_time)
TheCurrentMonth <- format(current_time, "%m")
TheCurrentMonth <- as.integer(TheCurrentMonth)
InterestedMonths <- c(TheCurrentMonth-1, TheCurrentMonth, TheCurrentMonth+1)
PlotData <- DST_Data 
Today <- PlotData |> filter(Date %in% current_time)
sunrise_label <- paste("Sunrise:",format(Today$Sunrise[1], "%H:%M"))
sunset_label <- paste("Sunset:", format(Today$Sunset[1], "%H:%M"))
```

```{r}
#| echo: false
#| warning: false

plot <- ggplot(DST_Data, aes(x = Date)) +
  geom_line(aes(y = Sunrise, color = "Sunrise")) +
  geom_line(aes(y = Sunset, color = "Sunset")) + 
  geom_point(aes(y = Dawn, color = "Dawn"), size = 0.2) +
  geom_point(aes(y = Dusk, color = "Dusk"), size = 0.2) +
  labs(x = "Date", y = "Time", color = "Event", title = "Sunrise and Sunset") +
  theme_minimal() +
  scale_y_time(labels = scales::time_format("%H:%M"))

AllSunrise <- plot

DawnSunrise <- ggplot(PlotData, aes(x = Date)) +
  geom_line(aes(y = Sunrise, color = "Sunrise")) + 
  geom_point(aes(y = Dawn, color = "Dawn"), size = 0.2) +
  labs(x = "Date", y = "Time", color = "Event", title = "Sunrise") +
  theme_minimal() +
  scale_y_time(labels = scales::time_format("%H:%M"))

DuskSunset <- ggplot(PlotData, aes(x = Date)) +
  geom_line(aes(y = Sunset, color = "Sunset")) + 
  geom_point(aes(y = Dusk, color = "Dusk"), size = 0.2) +
  labs(x = "Date", y = "Time", color = "Event", title = "Sunset") +
  theme_minimal() +
  scale_y_time(labels = scales::time_format("%H:%M"))
```


```{r}
#| echo: false
#| warning: false

url <- "https://www.ndbc.noaa.gov/data/realtime2/BLTM2.txt"
FtMcHenry <- NOAA_Buoys(x="https://www.ndbc.noaa.gov/data/realtime2/BLTM2.txt")
```

```{r}
#| echo: false
#| warning: false


FtMcHenry <- FtMcHenry |> select(datetime, WTMP, ATMP, WDIR, WSPD, GST) |>
   mutate(Site = "FtMcHenry")

Data <- FtMcHenry

Data$WTMP <- as.double(Data$WTMP)
Data <- na.omit(Data)
rownames(Data) <- NULL
Data <- Data |> mutate(WTMPF = (WTMP * 9/5) + 32)

Data$ATMP <- as.double(Data$ATMP)
Data <- na.omit(Data)
rownames(Data) <- NULL
Data <- Data |> mutate(ATMPF = (ATMP * 9/5) + 32)

Data$WSPD <- as.double(Data$WSPD)
Data <- na.omit(Data)
rownames(Data) <- NULL
Data <- Data |> mutate(WSPDK = (WSPD * 1.943844),
                        WSPDM = (WSPD * 2.23694))

Data$GST <- as.double(Data$GST)
Data <- na.omit(Data)
rownames(Data) <- NULL
Data <- Data |> mutate(GSTK = (GST * 1.943844),
                        GSTM = (GST * 2.23694))

xValue <- "datetime"
yValue <- "WTMPF"
myfactor <- "Site"

WaterTemperature <- ggplot(Data, aes(x=.data[[xValue]], y = .data[[yValue]], color = .data[[myfactor]]))  +  geom_line(linewidth = 0.4) + labs(title = NULL, x = NULL, y = "Water Temperature (*F)") + theme_bw() + theme(legend.position = "right")
```

```{r}
#| echo: false
#| warning: false

url <- "https://forecast.weather.gov/MapClick.php?lat=39.2736&lon=-76.6264&unit=0&lg=english&FcstType=digital"
HourlyWeatherForecast <- FortyEightHour(url)
```

```{r}
#| echo: false
#| warning: false


MyData <- HourlyWeatherForecast
MyData$Date <- gsub("/(0+)", "/", MyData$Date)
MyData$Date <- paste(MyData$Date, year, sep="/")
MyData$Date <- lubridate::mdy(MyData$Date)
MyData$Hour <- paste0(MyData$Hour, ":00:00")
MyData$Hour <- lubridate::hms(MyData$Hour)
MyData$Hour[MyData$Hour == as.period(0)] <- lubridate::hms("23:59:59")

MyData <- MyData |> mutate(datetime = ymd(Date) + lubridate::hms(Hour)) |> relocate(datetime, .before = Date)

#colnames(MyData)

MyData$Temperature <- as.numeric(MyData$Temperature)
MyData$Dewpoint <- as.numeric(MyData$Dewpoint)
#MyData$HeatIndex <- as.numeric(MyData$HeatIndex)
MyData$SurfaceWind <- as.numeric(MyData$SurfaceWind)
MyData$Gust <- as.numeric(MyData$Gust)
MyData$SkyCover <- as.numeric(MyData$SkyCover)
MyData$RelativeHumidity <- as.numeric(MyData$RelativeHumidity)
MyData <- MyData %>% mutate(SurfaceWindKnots = SurfaceWind * 0.868976)
```

```{r}
#| echo: false
#| warning: false


  PlotData <- MyData
  
  PredictedAirTemperature <- ggplot(PlotData, aes(x = datetime)) +
  geom_line(aes(y = Temperature, color = "Temperature")) +
  geom_point(aes(y = Temperature, color="Temperature"), size=2) +
  labs(title = NULL, x = NULL, y = "Air Temperature (F)") +
  theme_bw() +
  theme(legend.position = "right")

  PredictedDewpoint <- ggplot(PlotData, aes(x = datetime)) +
  geom_line(aes(y = Dewpoint, color = "Dewpoint")) +
  geom_point(aes(y = Dewpoint, color="Dewpoint"), size=2) +
  labs(title = NULL, x = NULL, y = "Dewpoint") +
  theme_bw() +
  theme(legend.position = "right")

  PredictedRelativeHumidity <- ggplot(PlotData, aes(x = datetime)) +
  geom_line(aes(y = RelativeHumidity, color = "RelativeHumidity")) +
  geom_point(aes(y = RelativeHumidity, color="RelativeHumidity"), size=2) +
  labs(title = NULL, x = NULL, y = "Relative Humidity") +
  theme_bw() +
  theme(legend.position = "right")

  PredictedSkyCover <- ggplot(PlotData, aes(x = datetime)) +
  geom_line(aes(y = SkyCover, color = "SkyCover")) +
  geom_point(aes(y = SkyCover, color="SkyCover"), size=2) +
  labs(title = NULL, x = NULL, y = "SkyCover") +
  theme_bw() +
  theme(legend.position = "right")

  PlotData$PrecipitationPotential <- as.numeric(PlotData$PrecipitationPotential)

  PredictedPrecipitationPotential <- ggplot(PlotData, aes(x = datetime)) +
  geom_line(aes(y = PrecipitationPotential, color = "PrecipitationPotential")) +
  geom_point(aes(y = PrecipitationPotential, color="PrecipitationPotential"), size=2) +
  labs(title = NULL, x = NULL, y = "Precipitation Potential") +
  theme_bw() +
  theme(legend.position = "right")
```

```{r}
#| echo: false
#| warning: false


  PlotData <- MyData
  
  PredictedWindSpeed <- ggplot(PlotData, aes(x = datetime)) +
  geom_line(aes(y = SurfaceWindKnots, color = "Wind")) +
  geom_point(aes(y = Gust, color="Gust"), size=2) +
  labs(title = NULL, x = NULL, y = "Wind Speed (knots)") +
  theme_bw() +
  theme(legend.position = "right") +
  geom_hline(yintercept = 10, linetype = "dashed", color = "red") + 
  geom_hline(yintercept = 21, linetype = "dashed", color = "red") 
```

```{r}
#| echo: false
#| warning: false

#WindSpeed
PlotData <- Data |> filter(Site == "FtMcHenry")

CurrentDate <- Sys.Date()

PlotData <- PlotData |> filter(datetime >= (CurrentDate - 7) & datetime <= (CurrentDate + 1))

AtmosphericTemperature <- ggplot(PlotData, aes(x = datetime)) +
  geom_line(aes(y = ATMPF, color="ATMPF"), linewidth=0.5) +
  geom_point(aes(y = ATMPF, color="ATMPF"), size=0.5) + 
  labs(title = NULL, x = NULL, y = "Atmospheric Temperature (*F)") +
  theme_bw() + theme(legend.position = "right")

WindSpeed <- ggplot(PlotData, aes(x = datetime)) +
  geom_line(aes(y = WSPDK, color="Wind"), linewidth=0.5) +
  geom_point(aes(y = GSTK, color="Gust"), size=0.5) + 
  labs(title = NULL, x = NULL, y = "Wind Speed (knots)") +
  theme_bw() + theme(legend.position = "right")

Windspeed <- WindSpeed + geom_hline(yintercept = 10, linetype = "dashed", color = "red") + geom_hline(yintercept = 21, linetype = "dashed", color = "red") 
```

```{r}
#| echo: false
#| warning: false


# Rainfall
url <- "https://forecast.weather.gov/data/obhistory/KDMH.html"

TheInitialData <- RainfallHistorical(url=url)

max_y <- max(TheInitialData$Precip1hr, na.rm = TRUE)

TotalPrecipitation <- TheInitialData |> group_by(Date) |>
  summarise(TotalPrecipitation = sum(Precip1hr, na.rm = TRUE))
TotalRainfallPerDay <- TotalPrecipitation |>
  mutate(datetime = as.POSIXct(Date) + hours(12))

InitialPlot <- ggplot(TheInitialData, aes(x = datetime, y = Precip1hr)) +
  geom_col(fill = "darkblue") +
  theme_bw() +
  theme(axis.title.x = element_blank()) +
  labs(y = "Precipitation (in)")

PreviousRainfall <- InitialPlot + geom_label(data = TotalRainfallPerDay, aes(x = datetime, y = max_y, label = round(TotalPrecipitation, 2)), fill = "white", color = "black", size = 3, label.padding = unit(0.3, "lines"))
```

```{r}
#| echo: false
#| warning: false


PlotData <- TheInitialData

PlotData$RelativeHumidity <- gsub("%", "", fixed=TRUE, PlotData$RelativeHumidity)
PlotData$RelativeHumidity <- as.numeric(PlotData$RelativeHumidity)

Dewpoint <- ggplot(PlotData, aes(x = datetime)) +
  geom_line(aes(y = Dwpt, color="Dwpt"), linewidth=0.5) +
  geom_point(aes(y = Dwpt, color="Dwpt"), size=0.5) + 
  labs(title = NULL, x = NULL, y = "Dewpoint") +
  theme_bw() + theme(legend.position = "right")

RelativeHumidity <- ggplot(PlotData, aes(x = datetime)) +
  geom_line(aes(y = RelativeHumidity, color="RelativeHumidity"), linewidth=0.5) +
  geom_point(aes(y = RelativeHumidity, color="RelativeHumidity"), size=0.5) + 
  labs(title = NULL, x = NULL, y = "RelativeHumidity") +
  theme_bw() + theme(legend.position = "right")

Barometer <- ggplot(PlotData, aes(x = datetime)) +
  geom_line(aes(y = SeaLevelmb, color="SeaLevelmb"), linewidth=0.5) +
  geom_point(aes(y = SeaLevelmb, color="SeaLevelmb"), size=0.5) + 
  labs(title = NULL, x = NULL, y = "SeaLevelmb") +
  theme_bw() + theme(legend.position = "right")

```

```{r}
#| echo: false
#| warning: false


# Tides
url <- "https://marineweather.net/tide/fort-mchenry-marsh-patapsco-river-md-tides"

PlotData <- Tides(url=url)

current_time <- Sys.time()

#PlotData <- PlotData |> arrange(datetime)

TidalData <- ggplot(PlotData, aes(x = datetime, y = Feet)) +
  geom_line() + geom_point() +
  labs(x = "Date", y = "Feet") +
  theme_bw() +
  geom_vline(xintercept = current_time, linetype = "dashed", color = "red")

TidalDistinct <- ggplot(PlotData, aes(x = datetime, y = Feet, color = Tide)) +
  geom_line() +
  labs(x = "Date", y = "Feet", color = "Tide") +
  theme_bw() +
  geom_vline(xintercept = current_time, linetype = "dashed", color = "red")
```

## First Column 

### First Row {.tabset}

#### Dawn
```{r}
#| warning: false
plotly::ggplotly(DawnSunrise)
```

#### Dusk

```{r}
#| warning: false
plotly::ggplotly(DuskSunset)
```

#### Both
```{r}
#| warning: false
plotly::ggplotly(AllSunrise)
```

### Second Row {.tabset}

#### Air Temperature
```{r}
plotly::ggplotly(AtmosphericTemperature)
```

#### Air Temperature Forecast
```{r}
plotly::ggplotly(PredictedAirTemperature)
```

#### Dewpoint
```{r}
plotly::ggplotly(Dewpoint)
```

#### Dewpoint Forecast 
```{r}
plotly::ggplotly(PredictedDewpoint)
```

### Third Row {.tabset}

#### Rainfall
```{r}
plotly::ggplotly(PreviousRainfall)
```

#### Rainfall Forecast
```{r}
plotly::ggplotly(PreviousRainfall)
```

#### Precipitation Potential
```{r}
plotly::ggplotly(PredictedPrecipitationPotential)
```

#

## Second Column 

### First Row {.tabset}

#### Tide
```{r}
plotly::ggplotly(TidalData)
```

#### Tide Forecast
```{r}
plotly::ggplotly(TidalData)
```

### Second Row {.tabset}

#### Water Temperature
```{r}
plotly::ggplotly(WaterTemperature)
```

#### Relative Humidity 
```{r}
plotly::ggplotly(RelativeHumidity)
```

#### Relative Humidity Forecast
```{r}
plotly::ggplotly(PredictedRelativeHumidity)
```

#### SkyCover Forecast
```{r}
plotly::ggplotly(PredictedSkyCover)
```

### Third Row {.tabset}

#### Windspeed
```{r}
plotly::ggplotly(Windspeed)
```

#### Windspeed Forecast
```{r}
plotly::ggplotly(PredictedWindSpeed)
```

#### Barometer
```{r}
plotly::ggplotly(Barometer)
```