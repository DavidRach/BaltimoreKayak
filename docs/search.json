[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "library(Streptoprocne)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(ggplot2)\nurl &lt;- \"https://aa.usno.navy.mil/calculated/rstt/year?ID=AA&year=2024&task=0&lat=39.2805&lon=-76.5940&label=Baltimore%2C+MD&tz=5.00&tz_sign=-1&submit=Get+Data\"\nSunriseTable &lt;- Streptoprocne::SunriseSunset(x=url)\n\nurl &lt;- \"https://aa.usno.navy.mil/calculated/rstt/year?ID=AA&year=2024&task=2&lat=39.2805&lon=-76.5940&label=Baltimore%2C+MD&tz=5.00&tz_sign=-1&submit=Get+Data\"\nTwilightTable &lt;- CivilTwilight(x=url)\nyear &lt;- as.integer(format(Sys.Date(), \"%Y\"))\n\nTheData &lt;- left_join(SunriseTable, TwilightTable, by=c(\"Month\", \"Day\"))\n\nTheData$Date &lt;- lubridate::make_date(year = year,\n month = match(TheData$Month, month.name), day = as.integer(TheData$Day))\n\nData &lt;- TheData |&gt; arrange(Date)|&gt; relocate(Date, .before = Sunrise) |&gt;\n   select(-Month, -Day)\n\ntz &lt;- \"America/New_York\"\ndates &lt;- seq(as.POSIXct(paste0(year, \"-01-01\"), tz = tz),\n  as.POSIXct(paste0(year, \"-12-31\"), tz = tz),by = \"day\")\ndst_changes &lt;- which(diff(lubridate::dst(dates)) != 0)\ndst_start &lt;- dates[dst_changes[1] + 1] \ndst_end &lt;- dates[dst_changes[2] + 1]\n\nDST_Data &lt;- Data |&gt; mutate(\n      Sunrise = case_when(\n      Date &gt;= dst_start & Date &lt; dst_end ~ Sunrise + hours(1),\n      TRUE ~ Sunrise),\n    Sunset = case_when(\n      Date &gt;= dst_start & Date &lt; dst_end ~ Sunset + hours(1),\n      TRUE ~ Sunset),\n    Dawn = case_when(\n      Date &gt;= dst_start & Date &lt; dst_end ~ Dawn + hours(1),\n      TRUE ~ Dawn),\n    Dusk = case_when(\n      Date &gt;= dst_start & Date &lt; dst_end ~ Dusk + hours(1),\n      TRUE ~ Dusk))\n\ncurrent_time &lt;- Sys.time()\ncurrent_time &lt;- as.Date(current_time)\nTheCurrentMonth &lt;- format(current_time, \"%m\")\nTheCurrentMonth &lt;- as.integer(TheCurrentMonth)\nInterestedMonths &lt;- c(TheCurrentMonth-1, TheCurrentMonth, TheCurrentMonth+1)\nPlotData &lt;- DST_Data \nToday &lt;- PlotData |&gt; filter(Date %in% current_time)\nsunrise_label &lt;- paste(\"Sunrise:\",format(Today$Sunrise[1], \"%H:%M\"))\nsunset_label &lt;- paste(\"Sunset:\", format(Today$Sunset[1], \"%H:%M\"))\nurl &lt;- \"https://www.ndbc.noaa.gov/data/realtime2/BLTM2.txt\"\nFtMcHenry &lt;- NOAA_Buoys(x=\"https://www.ndbc.noaa.gov/data/realtime2/BLTM2.txt\")\n# warning: FALSE\n\nFtMcHenry &lt;- FtMcHenry |&gt; select(datetime, WTMP, ATMP, WDIR, WSPD, GST) |&gt;\n   mutate(Site = \"FtMcHenry\")\n\nData &lt;- FtMcHenry\n\nData$WTMP &lt;- as.double(Data$WTMP)\n\nWarning: NAs introduced by coercion\n\nData &lt;- na.omit(Data)\nrownames(Data) &lt;- NULL\nData &lt;- Data |&gt; mutate(WTMPF = (WTMP * 9/5) + 32)\n\nData$ATMP &lt;- as.double(Data$ATMP)\n\nWarning: NAs introduced by coercion\n\nData &lt;- na.omit(Data)\nrownames(Data) &lt;- NULL\nData &lt;- Data |&gt; mutate(ATMPF = (ATMP * 9/5) + 32)\n\nData$WSPD &lt;- as.double(Data$WSPD)\n\nWarning: NAs introduced by coercion\n\nData &lt;- na.omit(Data)\nrownames(Data) &lt;- NULL\nData &lt;- Data |&gt; mutate(WSPDK = (WSPD * 1.943844),\n                        WSPDM = (WSPD * 2.23694))\n\nData$GST &lt;- as.double(Data$GST)\nData &lt;- na.omit(Data)\nrownames(Data) &lt;- NULL\nData &lt;- Data |&gt; mutate(GSTK = (GST * 1.943844),\n                        GSTM = (GST * 2.23694))\n\nxValue &lt;- \"datetime\"\nyValue &lt;- \"WTMPF\"\nmyfactor &lt;- \"Site\"\n\nWaterTemperature &lt;- ggplot(Data, aes(x=.data[[xValue]], y = .data[[yValue]], color = .data[[myfactor]]))  +  geom_line(linewidth = 0.4) + labs(title = NULL, x = NULL, y = \"Water Temperature (*F)\") + theme_bw() + theme(legend.position = \"right\")\nurl &lt;- \"https://forecast.weather.gov/MapClick.php?lat=39.2736&lon=-76.6264&unit=0&lg=english&FcstType=digital\"\nHourlyWeatherForecast &lt;- FortyEightHour(url)\nMyData &lt;- HourlyWeatherForecast\nMyData$Date &lt;- gsub(\"/(0+)\", \"/\", MyData$Date)\nMyData$Date &lt;- paste(MyData$Date, year, sep=\"/\")\nMyData$Date &lt;- lubridate::mdy(MyData$Date)\nMyData$Hour &lt;- paste0(MyData$Hour, \":00:00\")\nMyData$Hour &lt;- lubridate::hms(MyData$Hour)\nMyData$Hour[MyData$Hour == as.period(0)] &lt;- hms(\"23:59:59\")\n\nMyData &lt;- MyData |&gt; mutate(datetime = ymd(Date) + hms(Hour)) |&gt; relocate(datetime, .before = Date)\n\n#colnames(MyData)\n\nMyData$Temperature &lt;- as.numeric(MyData$Temperature)\nMyData$Dewpoint &lt;- as.numeric(MyData$Dewpoint)\n#MyData$HeatIndex &lt;- as.numeric(MyData$HeatIndex)\nMyData$SurfaceWind &lt;- as.numeric(MyData$SurfaceWind)\nMyData$Gust &lt;- as.numeric(MyData$Gust)\nMyData$SkyCover &lt;- as.numeric(MyData$SkyCover)\nMyData$RelativeHumidity &lt;- as.numeric(MyData$RelativeHumidity)\nMyData &lt;- MyData %&gt;% mutate(SurfaceWindKnots = SurfaceWind * 0.868976)\nPlotData &lt;- MyData\n  \n  PredictedAirTemperature &lt;- ggplot(PlotData, aes(x = datetime)) +\n  geom_line(aes(y = Temperature, color = \"Temperature\")) +\n  geom_point(aes(y = Temperature, color=\"Temperature\"), size=2) +\n  labs(title = NULL, x = NULL, y = \"Air Temperature (F)\") +\n  theme_bw() +\n  theme(legend.position = \"right\")\n\n  PredictedDewpoint &lt;- ggplot(PlotData, aes(x = datetime)) +\n  geom_line(aes(y = Dewpoint, color = \"Dewpoint\")) +\n  geom_point(aes(y = Dewpoint, color=\"Dewpoint\"), size=2) +\n  labs(title = NULL, x = NULL, y = \"Dewpoint\") +\n  theme_bw() +\n  theme(legend.position = \"right\")\n\n  PredictedRelativeHumidity &lt;- ggplot(PlotData, aes(x = datetime)) +\n  geom_line(aes(y = RelativeHumidity, color = \"RelativeHumidity\")) +\n  geom_point(aes(y = RelativeHumidity, color=\"RelativeHumidity\"), size=2) +\n  labs(title = NULL, x = NULL, y = \"Relative Humidity\") +\n  theme_bw() +\n  theme(legend.position = \"right\")\n\n  PredictedSkyCover &lt;- ggplot(PlotData, aes(x = datetime)) +\n  geom_line(aes(y = SkyCover, color = \"SkyCover\")) +\n  geom_point(aes(y = SkyCover, color=\"SkyCover\"), size=2) +\n  labs(title = NULL, x = NULL, y = \"SkyCover\") +\n  theme_bw() +\n  theme(legend.position = \"right\")\n\n  PlotData$PrecipitationPotential &lt;- as.numeric(PlotData$PrecipitationPotential)\n\n  PredictedPrecipitationPotential &lt;- ggplot(PlotData, aes(x = datetime)) +\n  geom_line(aes(y = PrecipitationPotential, color = \"PrecipitationPotential\")) +\n  geom_point(aes(y = PrecipitationPotential, color=\"PrecipitationPotential\"), size=2) +\n  labs(title = NULL, x = NULL, y = \"Precipitation Potential\") +\n  theme_bw() +\n  theme(legend.position = \"right\")\nPlotData &lt;- MyData\n  \n  PredictedWindSpeed &lt;- ggplot(PlotData, aes(x = datetime)) +\n  geom_line(aes(y = SurfaceWindKnots, color = \"Wind\")) +\n  geom_point(aes(y = Gust, color=\"Gust\"), size=2) +\n  labs(title = NULL, x = NULL, y = \"Wind Speed (knots)\") +\n  theme_bw() +\n  theme(legend.position = \"right\") +\n  geom_hline(yintercept = 10, linetype = \"dashed\", color = \"red\") + \n  geom_hline(yintercept = 21, linetype = \"dashed\", color = \"red\")\n# Rainfall\nurl &lt;- \"https://forecast.weather.gov/data/obhistory/KDMH.html\"\n\nTheInitialData &lt;- RainfallHistorical(url=url)\n\nmax_y &lt;- max(TheInitialData$Precip1hr, na.rm = TRUE)\n\nTotalPrecipitation &lt;- TheInitialData |&gt; group_by(Date) |&gt;\n  summarise(TotalPrecipitation = sum(Precip1hr, na.rm = TRUE))\nTotalRainfallPerDay &lt;- TotalPrecipitation |&gt;\n  mutate(datetime = as.POSIXct(Date) + hours(12))\n\nInitialPlot &lt;- ggplot(TheInitialData, aes(x = datetime, y = Precip1hr)) +\n  geom_col(fill = \"darkblue\") +\n  theme_bw() +\n  theme(axis.title.x = element_blank()) +\n  labs(y = \"Precipitation (in)\")\n\nPreviousRainfall &lt;- InitialPlot + geom_label(data = TotalRainfallPerDay, aes(x = datetime, y = max_y, label = round(TotalPrecipitation, 2)), fill = \"white\", color = \"black\", size = 3, label.padding = unit(0.3, \"lines\"))\nPlotData &lt;- TheInitialData\n\nPlotData$RelativeHumidity &lt;- gsub(\"%\", \"\", fixed=TRUE, PlotData$RelativeHumidity)\nPlotData$RelativeHumidity &lt;- as.numeric(PlotData$RelativeHumidity)\n\nDewpoint &lt;- ggplot(PlotData, aes(x = datetime)) +\n  geom_line(aes(y = Dwpt, color=\"Dwpt\"), linewidth=0.5) +\n  geom_point(aes(y = Dwpt, color=\"Dwpt\"), size=0.5) + \n  labs(title = NULL, x = NULL, y = \"Dewpoint\") +\n  theme_bw() + theme(legend.position = \"right\")\n\nRelativeHumidity &lt;- ggplot(PlotData, aes(x = datetime)) +\n  geom_line(aes(y = RelativeHumidity, color=\"RelativeHumidity\"), linewidth=0.5) +\n  geom_point(aes(y = RelativeHumidity, color=\"RelativeHumidity\"), size=0.5) + \n  labs(title = NULL, x = NULL, y = \"RelativeHumidity\") +\n  theme_bw() + theme(legend.position = \"right\")\n\nBarometer &lt;- ggplot(PlotData, aes(x = datetime)) +\n  geom_line(aes(y = SeaLevelmb, color=\"SeaLevelmb\"), linewidth=0.5) +\n  geom_point(aes(y = SeaLevelmb, color=\"SeaLevelmb\"), size=0.5) + \n  labs(title = NULL, x = NULL, y = \"SeaLevelmb\") +\n  theme_bw() + theme(legend.position = \"right\")\n# Tides\nurl &lt;- \"https://marineweather.net/tide/fort-mchenry-marsh-patapsco-river-md-tides\"\n\nPlotData &lt;- Tides(url=url)\n\ncurrent_time &lt;- Sys.time()\n\n#PlotData &lt;- PlotData |&gt; arrange(datetime)\n\nTidalData &lt;- ggplot(PlotData, aes(x = datetime, y = Feet)) +\n  geom_line() + geom_point() +\n  labs(x = \"Date\", y = \"Feet\") +\n  theme_bw() +\n  geom_vline(xintercept = current_time, linetype = \"dashed\", color = \"red\")\n\nTidalDistinct &lt;- ggplot(PlotData, aes(x = datetime, y = Feet, color = Tide)) +\n  geom_line() +\n  labs(x = \"Date\", y = \"Feet\", color = \"Tide\") +\n  theme_bw() +\n  geom_vline(xintercept = current_time, linetype = \"dashed\", color = \"red\")"
  },
  {
    "objectID": "index.html#first-column",
    "href": "index.html#first-column",
    "title": "",
    "section": "First Column",
    "text": "First Column\n\nFirst Row\n\nDawn\n\nplotly::ggplotly(DawnSunrise)\n\n\n\n\n\n\n\nDusk\n\nplotly::ggplotly(DuskSunset)\n\n\n\n\n\n\n\nBoth\n\nplotly::ggplotly(AllSunrise)\n\n\n\n\n\n\n\n\nSecond Row\n\nAir Temperature\n\nplotly::ggplotly(AtmosphericTemperature)\n\n\n\n\n\n\n\nAir Temperature Forecast\n\nplotly::ggplotly(PredictedAirTemperature)\n\n\n\n\n\n\n\nDewpoint\n\nplotly::ggplotly(Dewpoint)\n\n\n\n\n\n\n\nDewpoint Forecast\n\nplotly::ggplotly(PredictedDewpoint)\n\n\n\n\n\n\n\n\nThird Row\n\nRainfall\n\nplotly::ggplotly(PreviousRainfall)\n\nWarning in geom2trace.default(dots[[1L]][[1L]], dots[[2L]][[1L]], dots[[3L]][[1L]]): geom_GeomLabel() has yet to be implemented in plotly.\n  If you'd like to see this geom implemented,\n  Please open an issue with your example code at\n  https://github.com/ropensci/plotly/issues\n\n\n\n\n\n\n\n\nRainfall Forecast\n\nplotly::ggplotly(PreviousRainfall)\n\nWarning in geom2trace.default(dots[[1L]][[1L]], dots[[2L]][[1L]], dots[[3L]][[1L]]): geom_GeomLabel() has yet to be implemented in plotly.\n  If you'd like to see this geom implemented,\n  Please open an issue with your example code at\n  https://github.com/ropensci/plotly/issues\n\n\n\n\n\n\n\n\nPrecipitation Potential\n\nplotly::ggplotly(PredictedPrecipitationPotential)"
  },
  {
    "objectID": "index.html#second-column",
    "href": "index.html#second-column",
    "title": "",
    "section": "Second Column",
    "text": "Second Column\n\nFirst Row\n\nTide\n\nplotly::ggplotly(TidalData)\n\n\n\n\n\n\n\nTide Forecast\n\nplotly::ggplotly(TidalData)\n\n\n\n\n\n\n\n\nSecond Row\n\nWater Temperature\n\nplotly::ggplotly(WaterTemperature)\n\n\n\n\n\n\n\nRelative Humidity\n\nplotly::ggplotly(RelativeHumidity)\n\n\n\n\n\n\n\nRelative Humidity Forecast\n\nplotly::ggplotly(PredictedRelativeHumidity)\n\n\n\n\n\n\n\nSkyCover Forecast\n\nplotly::ggplotly(PredictedSkyCover)\n\n\n\n\n\n\n\n\nThird Row\n\nWindspeed\n\nplotly::ggplotly(Windspeed)\n\n\n\n\n\n\n\nWindspeed Forecast\n\nplotly::ggplotly(PredictedWindSpeed)\n\n\n\n\n\n\n\nBarometer\n\nplotly::ggplotly(Barometer)"
  }
]